/*
Name: Rayton Lin
Teacher: Mr. Noukhovitch
Class: ICS4U1-03
Date: January 5th, 2019
Purpose: This program stores information for a ride sharing app using classes, inheritance, constructors, destructors, functions, exceptions and dynamic memory.
*/
#include <iostream>

using namespace std;
string InvalidInput = "The input is invalid. The input can not be negative.";	//String to be thrown when an error due to a negative input occurs.
string InputMoreThanReserved = "The input is more than the number of reserved seats, so the inputted number of seats can not be unreserved.";	//String to be thrown when the number of reserved seats is too large.

class RideBooking
{				//Creates a class to represent the ride's booking.
public:			//These are public methods.
  RideBooking () {}; //Constructor for a ride.
  ~RideBooking() {}; //Destructor for when the ride is finished.
  void setCar(int num, int capacity); //Method to set the number and number of seats of the car.
  void makeReservation (string destinationInput);	//Method that makes a reservation.
  void cancelReservation ();	//Method that cancels a reservation.
  int getCarNumber ();		//Method that obtains the number of the car that is taken for the ride.
  string getDestination ();	//Method that obtains the destination of the ride.
private:			//These are private members that can only be accessed by the public methods.
  int carNumber;		//Represents the number of the car that is taken for the ride.
  int numOfSeats;		//Represents the number of seats of the ride.
  //string destination;		//Represents the destination of the ride.
  bool reserved; //Represents if the car is reserved for a ride or not.
};

void RideBooking::setCar(int num, int capacity) //Method to set the number and number of seats of the car.
{
    carNumber=num;
    numOfSeats=capacity;
    reserved=false;
    //Sets the methods to the inputted parameters. The car is not reserved until a reservation is made.
}






//subclass Carpool

//Subclass Single Dest

int main ()
{
  string inputCommand="";		//Initializes a variable that stores inputted commands.
  int inputNumber;		//Initializes a variable that stores inputted numbers.
  int maxNumberOfRides;		//Initializes a variable storing the maximum number of flights.
  cout << "Enter the maximum number of rides that can be stored: ";
  cin >> maxNumberOfRides;
  cout << "\n";
  RideBooking *rides;
  rides=new RideBooking[maxNumberOfRides]; //Initializes an array of pointers to represent the rides in the ride-sharing app, with the maximum number of rides being the number inputted.

  cout<<"The following commands can be entered.\n";
  cout<<"The create command creates a new empty car for a ride. You will then be asked to enter the number of the car, and then the number of seats in the car.\n";
  cout<<"The delete command deletes a ride. You will then be asked for the number of the car to be deleted.\n";
  cout<<"The reserve command reserves a ride. You will then be asked for the number of seats necessary, and the destination.\n";
  cout<<"The cancel command cancels a ride. You will then be asked for the number of the car whose ride will be cancelled.";
  cout<<"The quit command exits the program.\n";

  while (inputCommand != "quit")
    {
      cout << "Enter your command (create, add, cancel, delete or quit): ";
	  cin >> inputCommand;
      cout << "\n";
      
    }
  delete [] rides; //Deletes the array from memory.
  return 0;
}
